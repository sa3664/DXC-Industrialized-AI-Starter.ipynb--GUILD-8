# -*- coding: utf-8 -*-
"""Copy of DXC-Industrialized-AI-Starter.ipynb- GUILD 8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EcokDkUKEsjmTylAfvvtfQh7iMC-z9DO

# <H1>The DXC AI Starter</H1>

The code in this document makes it easier to build and deploy a machine-learning microservice. It installs the required library dependencies, builds a data pipeline, builds a model, deploys a microservice, and publishes an API endpoint to the microservice. Find the code marked with <code># TODO</code> and replace it with your own.

<table class="tfo-notebook-buttons" align="left">

  <td>
    <a target="_blank" href="https://colab.research.google.com/github/dxc-technology/DXC-Industrialized-AI-Starter/blob/master/DXC_Industrialized_AI_Starter.ipynb"><img src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab</a>
  </td>

  <td>
    <a target="_blank" href="https://github.com/dxc-technology/DXC-Industrialized-AI-Starter"><img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on GitHub</a>
  </td>
</table>

## <H2> Set up the development environment</H2>

This code installs all the packages you'll need. Run it first. It should take 30 seconds or so to complete. If you get missing module errors later, it may be because you haven't run this code. Restart the runtime/session after executing the below code.
"""

# Commented out IPython magic to ensure Python compatibility.
# ##After executing this code, You must restart the runtime/session to use newly installed versions.
# %%capture
# ! pip install DXC-Industrialized-AI-Starter
# import os
# os.kill(os.getpid(), 9)

"""From DXC-Industrialized-AI-Starter library import dxc-ai package

### <b>Todo: </b>
Restart the runtime/session after executing the above code cell. 

Runtime -> Restart Runtime
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# from dxc import ai

"""## <H2>The Industrialized AI Open Badge Academy</H2>

The AI Open Badges are verifiable, portable digital badges with embedded metadata about skills and achievements. They comply with the Open Badges Specification and are shareable across the web. This code defines the parameters needed to apply for an Industrialized AI Open Badge. This is where you define the email address that gets credit for the badge, the platform responsible for issuing the badge, and the evidence used to justify granting the badge. You should not have to change any of the badge platform parameters. For the badge evidence, you must paste a link to this notebook.
<code>AI_Badge</code> is an enumeration of all unique badges. <code>ai_badge_id</code> is a mapping from <code>AI_Badge</code> to a unique identifier.<br />
**AI_Badge:** <ol> <li> CREATE_DATA_STORIES </li><li>RUN_AGILE_TRANSFORMATION</li><li>BUILD_DATA_PIPELINES</li><li>RUN_AI_EXPERIMENT</li><li>BUILD_UTILITY_AI_SERVICES</li><li>PERFORM_AI_FORENSICS</li><li>TEST</li> </ol>**AI_Guild_Roles:** <ol><li>PROJECT_MANAGER</li><li>DATA_SCIENTIST</li><li>DATA_ENGINEER</li><li>ALL</li></ol>
"""

# TODO: create an AI guild profile
ai_guild_profile = {
    "guild_number": 8,
    #Provide the URL to the current notebook
    "badge_evidence": "https://colab.research.google.com/drive/1EcokDkUKEsjmTylAfvvtfQh7iMC-z9DO",
    "badge_platform_apiKey": "Yp8bmtzN85lrkGGmhjAM8jGpC1QniYw6EFk5lHh7",
    "badge_platform_apiHost": "https://uefowgpyw6.execute-api.us-east-1.amazonaws.com/",
    "badge_platform_apiBasePath": "prod/partner/",
    #Please identify guild members and roles
    #Please have each guild member use their DXC email address
    "guild_members" : {
       
        1: {
            "badge_applicant_email": "saggarwal56@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        },
        2: {
            "badge_applicant_email": "ajain433@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        },
        3: {
            "badge_applicant_email": "jgeorge69@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        } ,
        4: {
            "badge_applicant_email": "mmedam3@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        },
        5: {
            "badge_applicant_email": "nroychowdhur@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        },
        6: {
            "badge_applicant_email": "staj5@dxc.com",
            "roles" : [ai.AI_Guild_Role.ALL]
        }  
    }  
}

"""## Import Modules

This code imports the modules that you will need from each installed library. If you require additional modules, place them here. Modules that have been depricated should be upgraded or replaced.
"""

import doctest #documenting data stories
from IPython.display import YouTubeVideo
import requests

"""## <H1>Create a Data Story</H1>

The data story defines what the microservice is required to do. The code in the section accesses the raw data and defines an interface that the microservice must satisfy. Explore the raw data. Decide what the microservice will do. Write a test (data story) that will pass only when the microservice is successfully deployed.

## <H2> Access the raw data </H2>
Getting access to raw data is the very first task you have to complete. Your microservice is a wrapper for a machine-learning model. This code accesses the raw data that will be used to train the model.The read_data_frame_from_local_csv function allows you to import local character-delimited (commas, tabs, spaces) files.All parameters are optional. By default, the function will infer the header from the data, but an explicit header can be specified.read_data_frame_from_remote_csv works the same way except that it reads the file from a URL instead of from your local machine. The URL is required. The read_data_frame_from_local_excel_file function allows you to import XLSX files.The read_data_frame_from_local_json function allows you to import JSON files. When the file explorer is launched, you must select an XLSX file or the function will result in an error. The read_data_frame_from_remote_json function reads JSON files from a URL. the JSON data is flattened (in the case of nested data) and cast into Pandas data frame.

NOTE: Run the below code to access required file format. For <code>remote files</code> provide the <code> URL</code>, in case of <code>local file</code> one you run the code, it will allow you to select the file from your local drive.
"""

#reads csv from a url and loads it into a dataframe
csv_url = 'https://raw.githubusercontent.com/sa3664/DXC-Industrialized-AI-Starter.ipynb--GUILD-8/master/AB_NYC_2019.csv'
data0 = ai.read_data_frame_from_remote_csv(csv_url, col_names = [], delim_whitespace=False, header = 'infer')
data0.head()

data0 = data0.drop(['name', 'host_name'], axis=1)

data0.info()

"""### <H2> Define data fields </H2>
Mention the <code>text_fileds</code>,<code>date_fields</code>,<code>numeric_fields</code> and <code>categorical_fields</code> as per you data set. Below are example only.
"""

continuous_features=list(data0._get_numeric_data().columns)
print("Continuous Features:\n",continuous_features)

categorical_feature=list(data0.columns)
for i in continuous_features:
    categorical_feature.remove(i)

print("Categoroical Feature:\n",categorical_feature)

# TODO: define the data fields
text_fields = []
date_fields = ['last_review']
numeric_fields = continuous_features
categorical_fields = categorical_feature

"""### <H2> Clean the raw data </H2>
Execute <code>raw_data</code> so that it accesses your raw data and returns it as a Pandas dataframe. Any preprocessing of the raw data should be done here. 
"""

data0.isna().sum()

"""There are 10052 missing values in reviews_per_month and last_review.Both last_review and reviews_per_month have same number of instances and they also have the same numbers of missing values (over 10k missing values) in the dataset. This is shown using the code below. These two columns could be related and so have the same numbers of missing values.So they should be handled together.

"""

last_review_list=data0[data0['last_review'].isnull()].index.tolist()
reviews_per_month_list=data0[data0['reviews_per_month'].isnull()].index.tolist()
nonmatch=[x for x in last_review_list if x not in reviews_per_month_list]
nonmatch

"""Dropping missing values in name , host_name ,last_review and reviews_per_month."""

data0.dropna(how='any',subset=['last_review','reviews_per_month'], inplace=True)

data0.isna().sum()

data0 = data0[data0['price'] > 0]
data0 = data0[data0['minimum_nights'] <= 365]

"""Abnormalities in dataset: For example in this dataset, there are some abnormalities. The first one is that there are records with "price" = 0 which is unrealistic as this means no need to pay to stay. So these records should be removed.

The second is that the maximum of "minimum_nights" is 1250 which I believe is unrealistic.In "minimum_nights" there are few values ranging from 366-1250. We need to put a threshold as 365 days. Any records with "minimum_nights" larger than 365 will also be removed.
"""

#clean the data
impute = False
data1 = ai.clean_dataframe(data0, impute, text_fields, date_fields, numeric_fields, categorical_fields)

#display excerpts of the raw data
data1.head()

data1.info()

data1.isnull().sum()

"""### <H2>Explore the raw data</H2>
Now that you've read in the raw data, you can explore the data to determine how it can be used. This code provides methods for visualizing the data in useful ways.

<code>explore_features</code> visualizes the relationships between all features in a given data frame. Areas of heat show closely-related features. This visualization is useful when trying to determine which features can be predicted and which features are needed to make the prediction.

<code>visualize_missing_data</code> creates a visual display of missing data in a data frame. Each column of the data frame is shown as a column in the graph. Missing data is represented as horizontal lines in each column. This visualization is useful when determining whether or not to impute missing values or for determining whether or not the data is complete enough for analysis.

<code>plot_distributions</code> creates a distribution graph for each column in a given data frame. Graphs for data types that cannot be plotted on a distribution graph without refinement (types like dates), will show as blank in the output. This visualization is useful for determining skew or bias in the source data.

Use <code>visualize_missing_data</code> to visualize missing fields in your raw data. Determine if imputing is necessary. Refine <code>raw_data()</code>, if necessary, and repeat this analysis.
"""

ai.visualize_missing_data(data1)

"""Use <code>explore_features</code> to explore the correlations between features in the <code>raw_data</code>. Use the visualization to form a hypothesis about how the <code>raw_data</code> can be used. It may be necessary to enrich <code>raw_data</code> with other features to increase the number and strength of correlations. If necessary, refine <code>raw_data()</code> and repeat this analysis."""

ai.explore_features(data1)

"""Use <code>plot_distributions</code> to show the distributions for each feature in <code>raw_data</code>. Depending on <code>raw_data</code>, this visualization may take several minutes to complete. Use the visualization to determine if there is a data skew that may prevent proper analysis or useful insight. If necessary, refine <code>raw_data()</code> and repeat this analysis.

DATA WRANGLING:

Drop attributes: Some attributes like 'id','name', 'host_name','last_review' ,'longitude' and'latitude' can be dropped as they doesnot make much sense in prediction.
"""

data1 = data1.drop(['host_id','id','last_review','longitude','latitude','number_of_reviews'], axis=1)

ai.plot_distributions(data1)

data1.head()

"""## <H2>Define a story</H2>

The data story is a unit test that will only pass when the microservice is successfully deployed. After defining <code>raw_data()</code>, you will build a <code>data_story()</code>. Although this test will fail (initially), it defines the requirements for all remaining work. After writing the <code>data_story()</code>, complete the remaining tasks in this notebook. Rerun the <code>data_story()</code>. At this point, the test should succeed. All tasks are successfully complete when the <code>data_story()</code> succeeds.

<b>DO NOT SKIP THIS STEP.</b> Although unit testing does not contribute to the functionality that you will deploy, it does determine the requirements of success. You should clearly document your goals before continuing. This video provides an overview of test-driven development. It describes the concept of writing tests first and the reasons for doing so.
"""

YouTubeVideo('uGaNkTahrIw')

"""This video provides an overview of Python Doctests. It provides an explanation of automated testing in Python. It walks you through the basic tasks of creating and executing a test. Watch this video if you are unfamiliar with Doctests. This video should be removed or replaced if data stories are executed using something other than Doctests."""

YouTubeVideo('_BFeAJ8hC7Y')

"""This code defines a unit test that sends data to an API endpoint and checks for an expected result. Update the <code>Context</code>, <code>Intent</code>, and <code>Design</code> to reflect your story. 

The <code>design</code> is the specification for your AI microservice. It defines the URL enpoint for the service. The test submits test input to the endpoint and tests if the output is within an expected range. Given the input you defined, you must also define an expected range within which the microservice will output when it is working properly. This means that you must form an expectation or reasonable behavior for the microservice.

The <code>datastory</code> function acts as a contract that automatically verifies when you have completed the microservice. Create the <code>datastory()</code> and verify that the test fails. Complete the remaining tasks in this notebook. Rerun the <code>datastory()</code> and verify that the test passes. If the requirements of the microservice changes, update <code>datastory</code> and repeat this process.

"""

# TODO: write the AI microservice specification
def datastory(api_endpoint, input, header):
    """
    Context:
    This microservice is part of an AI that
    helps managers estimate the cost of fleet replacements.

    Intent:
    The microservice refines a fleet replacement cost estimate.
    It is designed to combine the expertise of people and
    machines. It will take an existing human estimate and add
    a correction factor that should make it more accurate.

    Design:
    >>> api_endpoint = "https://api.algorithmia.com/v1/algo/Nupurroy/Guild8Airbnb2/0.1.0"
    >>> input = '{"minimum_nights":3, "number_of_reviews":0, "calculated_host_listings_count":1, "availability_365":365,"neighbourhood_group":"Manhattan", "neighbourhood":"Harlem", "room_type":"Private room", "latitude":40.80902, "longitude":-73.94190}'
    >>> header = {'Content-Type': 'application/json',  'Authorization': 'simdNt7ATS4WxIvARlcMxiBL8/71'}
    >>> datastory(api_endpoint, input, header)
    True
    """

    try:
      headers = {
          'Content-Type': 'application/json',
          'Authorization': 'simdNt7ATS4WxIvARlcMxiBL8/71',
      }
      params = (
          ('timeout', '300'),
      )
      data = input
      response = requests.post(api_endpoint, headers=headers, params=params, data=data)
      result = response.json()['result']['results']
    
    except Exception as error:
      result = {error}

    return result

doctest.testmod(verbose=False)

"""### <H2>Apply for the Create Data Stories badge </H2>
This code applies for the Create Data Stories Industrialized AI Open Badge.<code>apply_for_an_ai_badge</code> applies for a a secific <code>ai_badge</code> on behalf of the user specified in the <code>ai_guide_profile</code>.
<b>Run this code only if you are interested in earning the badge.</b> This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that:
<ul>
  <li>You have successfuly completed all <code>#TODO</code> items for <code>datastory()</code>.</li>
  <li><code>datastory()</code> is a test that runs and fails.
  <li>The <code>datastory()</code> makes sense given the output of <code>raw_data()</code>.</li>
</ul>

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.</li>

### <H2>Todo: </H2>
Before applying for the create data stories badge please answer the following questions.

- Please provide the reviewer access to the raw data so that the reviewer can upload the data and run the code block.
- Describe your observation and analysis of the data exploration? 
- Describe how will you implement the AI functionality/AI driven transformation in your project?

### <H2>Todo: </H2>

1. Please provide the reviewer access to the raw data so that the reviewer can upload the data and run   
   the code block.

 **Ans.** The dataset has been uploaded on the GitHub . Please find below the link for the same:
      https://raw.githubusercontent.com/sa3664/DXC-Industrialized-AI-Starter.ipynb--GUILD-8/master/AB_NYC_2019.csv




2. Describe your observation and analysis of the data exploration?

  **Ans.** Please find below the points supporting the same:
  
   - We have dropped host_name and name initially as they will not be helpful in predicting the price.  
   - There were 10052 missing values in reviews_per_month and last_review.Both last_review and reviews_per_month have same number of instances and they also have the same numbers of missing values (over 10k missing values) in the dataset. These two columns have same row indexes where values are missing. So we dropped last_review as it will not much sense in predicting price.
  - We have observed that host_id,id and reviews_per_month , number_of_reviews are highly correlated. As
host_id and id will not contribute in predicting price we have dropped it . Also , we have dropped
number_of_reviews and kept reviews_per_month in dataframe data1.
  - availability_365: number of days when listing is available for booking.  Majorly, listing is available for booking is less than 50 days, but there are more than 2500 scenarios where property is available all round the year.
  - calculated_host_listing_count: amount of listing per host.
 Number of listings per host are generally less than 50 infact near to 10 listings, but in few cases we can observe that there are listings greater than 300 also.
  - minimum nights: amount of nights minimum. There are generally less than 50 nights of minimum stay.
 mimimum_nights ranges from 0 to 1250 which we believe is unrealistic. In "minimum_nights" there are few values ranging from 366-1250. We put a threshold as 365 days. Any records with "minimum_nights" larger than 365 are removed.
  - Price of many listing is 0 which is unreal, So we have removed enteries where price is less than or equal to 0.
  - Also, we have removed latitude and longitude attributes as they will are not correlated with price .



3. Describe how will you implement the AI functionality/AI driven transformation in your project?

  **Ans.** Please find below the points supporting the same:

  - As a host to figure out what price to charge for a listing on the site.
 
 - Airbnb pricing is important to get right, particularly in big cities like New York where there is lots of competition and even small differences in prices can make a big difference. It is also a difficult thing to do correctly — price too high and no one will book. Price too low and you’ll be missing out on a lot of potential income.
 
 - New hosts who are unsure of pricing for their listing . Prices vary depending on neighbourhood, city, availability arounf the year and many other factors.This would help the host to get the best price in the competitive market.
 
 **FUTURE SCOPE:**
 
 - Natural language processing could be implemented for sentiment analysis on reviews by the guests.
 
 - There could be many other factors affecting the price of listing such as ammenities and if the location has parking facility.
 
 - Price of a listing is highly affected if there is any famous landmark near by . So, the dataset could include those factors also to get better price for upcoming listing.List item
"""

# Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
# ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.CREATE_DATA_STORIES)

"""## <H1>Build a data pipeline</H1>
A data pipeline takes raw data and turns it into refined data that can be used to train and score a machine-learning model. The code in this section takes the output of <code>raw_data()</code> and puts it into a data store. It instructs the data store to refine the raw data into training data. It extracts the training data for use in training a machine-learning model.

You will be using MongoDb as your data store. This video provides a general overview of MongoDB. The document model of MongoDB breaks from the traditional relational model of common relational databases. This video describes the basic idea behind the document mdoel. It also describes MongoDb clusters and the methods used to scale. It introduces MongoDB Atlas, which you will be using in the remainder of this notebook.
"""

YouTubeVideo('EE8ZTQxa0AM')

"""This video provides an overview of Mongo DB Atlas. It provides an explanation of the software. It walks you through the basic tasks of setting up an account and generating the proper connection credentials. Watch this video if you are unfamiliar with Mongo DB Atlas. This video should be removed or replaced if the data is stored using something other than Mongo DB Atlas."""

YouTubeVideo('rPqRyYJmx2g')

"""### <H2>Collect raw data</H2>

This code defines the meta-data needed to connect to Mongo DB Atlas and create a new data store cluster. This is where you define basic information about the location of the cluster and the collection and database to use. Update this code with information appropriate to your project. This code assumes that the data store is Mongo DB Atlas. If the raw data is stored and refined using something other than Mongo DB Atlas, the parameters of the <code>data_layer</code> will need to be updated or replaced with something else. In order to provide the information required in <code>data_layer</code>, you must:
<ul>
  <li>Create a MongoDB Atlas account</li>
  <li>Create a cluster</li>
  <li>Create a user</li>
  <li>Generate a connection string</li>
</ul>

Note: 

When you configure the IP whitelist for your cluster, choose to allow a connection from anywhere. Since your notebook is running in Colab, we cannot guarantee a known IP address.

When creating the database connection string, choose the <code>Python</code> driver version 3.4 or later.
"""

# TODO: specify the details of the data layer
data_layer = {
    "connection_string": "mongodb+srv://AIBADGE:AIBADGE789@aicluster.d91jv.azure.mongodb.net/Guild8Airbnb?retryWrites=true&w=majority",
    "collection_name": "Guild8Airbnb",
    "database_name": "Guild8Airbnb" ,
    "data_source":"Guild8Airbnb",
    "cleaner":"no"  
}

"""Use <code>write_raw_data</code> function from <code>ai library</code>  to convert <code>Arrow</code> dates to <code>Strings</code> data types. This function also connects to Mongo DB ATlas a build a database and collection according to the parameters of <code>data_layers</code>.It also transfers the output of <code>raw_data()</code> into the database and collection. This function handles Mongo DB Atlas automatically."""

data1

data2 = ai.write_raw_data(data_layer, data1, date_fields)

"""### <H2>Ingest and clean data</H2>
This video provides an overview of how to create aggregation pipelines in Mongo DB Atlas. It describes the basic concepts and walks you through example pipelines. Watch this video if you are unfamiliar with Mongo DB Atlas aggregation pipelines. This video should be removed or replaced if the data is stored using something other than Mongo DB Atlas or the data is refined using something other than aggregation pipelines.
"""

YouTubeVideo('Kk6Er0c7srU')

"""This code instructs the data store on how to refine the output of <code>raw_data()</code> into something that can be used to train a machine-learning model. Update <code>data_pipeline()</code> with code with an aggregation pipeline that fits your project. The refined data using <code>access_data_from_pipeline</code> from <code>ai library</code>  will be stored in the <code>df</code> Pandas dataframe. Make sure the output is what you want before continuing. """

# TODO: define the code needed to refine the raw data
def data_pipeline():

  pipe = [
          {
              '$group':{
                  '_id': {
                      "neighbourhood_group":"$neighbourhood_group",
                      "neighbourhood":"$neighbourhood",
                      "room_type":"$room_type",
                      "minimum_nights":"$minimum_nights",
                      "reviews_per_month":"$reviews_per_month",
                      "calculated_host_listings_count":"$calculated_host_listings_count",
                      "availability_365":"$availability_365"
                      },
                      "price" : {"$avg":"$price"}
                    }
          }
  ]

  return pipe

df = ai.access_data_from_pipeline(data2, data_pipeline())
df.head()

"""### <H2>Apply for the Build Data Pipeline badge</H2>

This code applies for the Build Data Pipeline AI Open Badge.
<b>Run this code only if you are interested in earning the badge.</b> This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that:
<ul>
  <li>You have successfuly completed all <code>#TODO</code> items for <code>datapieline()</code> and <code>access_data_from_pipeline()</code>.</li>
  <li><code>df</code> is populated with data.</li>
  <li>The data in <code>df</code> matches the input specified in the design section of <code>datastory()</code>.</li>
</ul>

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.
"""

#Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
# ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.BUILD_DATA_PIPELINES)

"""## <H1>Run an experiment</H1>
An experiment trains and tests a machine-learning model. The code in this section runs a model through a complete lifecycle and saves the final model to the local drive. Run the code that defines a machine-learning model and its lifecycle. Design an experiment and execute it. Most of the work of choosing features and specific model parameters will be done automatically. The code will also automatically score each option and return the options with the best predictive performance.

### <H2>Execute the experiment</H2>

This code executes an experiment by running <code>run_experiment</code> from <code>ai library</code> on a model. Update <code>experiment_design</code> with parameters that fit your project. The <code>data</code> parameter should remain <code>df</code>-- the refined training data. The <code>model</code> parameter must be a <code>model</code> subclass. The <code>labels</code> parameter indicates the column of the <code>data</code> dataframe to be predicted. For the <code>prediction</code> model, the <code>meta-data</code> must describe the column to be predicted and the types for non-numeric columns. Check out [auto_ml](https://auto-ml.readthedocs.io/en/latest/index.html) to learn more about the auto_ml library usage and documentation.

Auto_Clustering model is also available in the AI_Starter, which inturn looks for the best model in the three Clustering models(Affinity Propagation, DBScan and K-means). Please refer to the [example document](https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/blob/master/Examples/Clustering.ipynb.ipynb) on implementing the clustering model.
"""

# TODO: design and run an experiment
experiment_design = {
    #model options include ['regression()', 'classification()','timeseries']
    "model": ai.regression(),
    "labels": df.price,
    "data": df,
    #Tell the model which column is 'output'
    #Also note columns that aren't purely numerical
    #Examples include ['nlp', 'date', 'categorical', 'ignore']
    "meta_data": {
      "price": "output",
      "_id.neighbourhood_group": "categorical",
      "_id.neighbourhood": "categorical",
      "_id.room_type": "categorical"

  }
}
trained_model = ai.run_experiment(experiment_design, verbose = False)

"""### <H2> Apply for the Run AI Experiment badge </H2>

This code applies for the Run AI Experiment Industrialized AI Open Badge. Run this code only if you are interested in earning the badge. This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that:
<ul>
<li>You have successfuly completed all <code>#TODO</code> items for the <code>experiment_design</code>.</li>
<li>You have successfully executed <code>run_experiment</code> on the <code>experiment_design</code>.</li>
</ul>

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.</li>

### <H2>Todo: </H2>
Before applying for the Run AI Experiment badge please answer the following questions.
<ul>
<li><b>Goal:</b> What is the overall goal of the AI? This should be an expansion on the text already supplied for AI service in your Data Story. </li>
<b>Ans.</b> As the Goal of our AI experiment is to help the host in pricing their Airbnb listing according to the rate of the other Airbnb’s in their location. We will also help the user in finding the Airbnb of their desired price out of all the listings of a location. As the pricing of the Airbnb depends on many external factors which leads to the rise/ fall of the prices and keeping this in mind both the host and the user we should be able to run our experiment and contribute to the statistical insight of the Airbnb’s data.

<li><b>Source:</b> This should be where and type of data was obtained. </li>
<b>Ans.</b> The data was obtained from one of the Kaggle competition tasks of New York City Airbnb data present in the given URL: https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data 

We had obtained the data with the below related features: 

Id(numeric) – Id provided to each Airbnb and is unique. 

name(string) – name of the listing 

host_id(numeric)- Id provided to each host and is unique. 

host_name(string) – name of the host 

neighbourhood_group(categorical) – neighbourhood name under which the Airbnb falls. 

Neighbourhood(categorical) – name of the neighbourhood 

Latitude(numeric) – geographical locations 

Longitude(numeric) - geographical locations 

room_type(categorical) – what type of room are you hiring, whether it is private or single-bed . 

price(numeric)- price of the airbnb 

minimum_nights(numeric) – minimum nights you can stay. 

,number_of_reviews(numeric) -  number of reviews the Airbnb has got. 

last_review(date) -  what date is the last review given. 

reviews_per_month(numeric) – total number of reviews each month 

calculated_host_listings_count(numeric) – count of total hostings till date hosted by the host 

availability_365(numeric) – availability of the Airbnb throughout the year. 

<li><b>Processing Steps:</b> Bullet points detailing what your AI intends to perform.</li>
<b>Ans.</b> 
<b>Cleaning of the data:</b> 
 

1.   We have dropped host_name and name initially as they will not be helpful in predicting the price. 
2.   There were 10052 missing values in reviews_per_month and last_review.Both last_review and reviews_per_month have same number of instances and they also have the same numbers of missing values (over 10k missing values) in the dataset. These two columns have same row indexes where values are missing. So we dropped last_review as it will not much sense in predicting price. 

<b>Visualizing the data:</b> 

1.   We have observed that host_id,id and reviews_per_month , number_of_reviews are highly correlated. As host_id and id will not contribute in predicting price we have dropped it . Also , we have dropped number_of_reviews and kept reviews_per_month in dataframe data1.

2. availability_365: number of days when listing is available for booking. Majorly, listing is available for booking is less than 50 days, but there are more than 2500 scenarios where property is available all round the year. 

3. calculated_host_listing_count: amount of listing per host. Number of listings per host are generally less than 50 infact near to 10 listings, but in few cases we can observe that there are listings greater than 300 also. 

4. minimum nights: amount of nights minimum. There are generally less than 50 nights of minimum stay. mimimum_nights ranges from 0 to 1250 which we believe is unrealistic. In "minimum_nights" there are few values ranging from 366-1250. We put a threshold as 365 days. Any records with "minimum_nights" larger than 365 are removed. 

5. Price of many listing is 0 which is unreal, So we have removed enteries where price is less than or equal to 0. 

6. Also, we have removed latitude and longitude attributes as they will are not correlated with price . 

7. Once the above steps were done we had stored our data in MongoDB which served as the storage. 

8. We have then used the regression model to perform the test and train split and train our data. 



<li><b>Output:</b> Describe the output type (last step from processing) and the type of resultants you expect to obtain (success and failures if appropriate).</li>
<b>Ans.</b> We are predicting the price from our experiment which serves as the output and is the numerical data. 
To perform this processing we have split the dataset and used the two categorical values considering the neighbourhood and the room_type to get us the price predictions according to the particular locations.
"""

# #Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
# ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.RUN_AI_EXPERIMENT)

"""## <H1>Model Explainability</H1>

<b>Note:</b> In the present version, Model Explainability supports only the custom models. We are implementing the explainability changes for Auto_ml models. Changes will be published soon. 

Model explainability is one of the most important problems in machine learning today. The code in this section helps you to understand the output of the machine learning model using interactive dashboards. Model explainability supports [SHAP - based explainer](https://github.com/slundberg/shap). Depending on the model, Model Explainer uses one of the supported SHAP explainers.  

### <H4>SHAP explainers:</H4>
<ul>
<li>SHAP TreeExplainer</li>
<li>SHAP DeepExplainer</li>
<li>SHAP LinearExplainer</li>
<li>SHAP KernelExplainer</li></ul>

<code>ai.Global_Model_Explanation</code> function generates the overall model predictions and generates a dictionary of sorted feature importance names and values. <code>ai.Explanation_Dashboard</code> function will generate an interactive visualization dashboard, you can investigate different aspects of your dataset and trained model via four tab views:
<ul>
<li>Model Performance</li>
<li>Data Explorer</li>
<li>Aggregate Feature Importance</li>
<li>Individual Feature Importance</li></ul>

To generate the model explainability, you need to pass your model, training data, test data to the functions. You can also optionally pass in feature names and output class names(classification) which will be used to make the explanations and visualizations more informative. Explanations will be generated default on the test data. If you pass the value of <code>explantion_data</code> parameter as 'Training', then the explanation will be generated on training data. But with more examples, explanations will take longer although they may be more accurate.

Check out [Examples](https://github.com/dxc-technology/DXC-Industrialized-AI-Starter/tree/master/Examples) to understand how to use each function, what parameters are expected for each function. Also check out [shap](https://github.com/slundberg/shap), [lime](https://github.com/marcotcr/lime), [interpret-community](https://github.com/interpretml/interpret-community) libraries to learn more about the Model explainability and its usage.
"""

#global_explanation = ai.Global_Model_Explanation(model,x_train,x_test,feature_names = None,classes = None, explantion_data = None)

#ai.Explanation_Dashboard(global_explanation, model, x_train, x_test, explantion_data = None)

"""## <H2>Apply for the AI Forensics AI badge</H2>

This code applies for the AI Forensics Open Badge. Run this code only if you are interested in earning the badge. This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that:
<ul>
<li>After exploring the raw data, you have ensured that the <code>raw_data</code> is free from bias that could adversely affect the <code>intent</code> of the <code>datastory()</code></li>
</ul>

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.</li>

### <H2>Todo: </H2>
Before applying for the badge please answer the following questions.
<ul>
<li>State where you got the dataset and what it contains.</li>
<b>Answer:</b> The data was obtained from one of the Kaggle competition tasks of New York City Airbnb data present in the given URL: https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data 

We had obtained the data with the below related features: 

Id(numeric) – Id provided to each Airbnb and is unique. 

name(string) – name of the listing 

host_id(numeric)- Id provided to each host and is unique. 

host_name(string) – name of the host 

neighbourhood_group(categorical) – neighbourhood name under which the Airbnb falls. 

Neighbourhood(categorical) – name of the neighbourhood 

Latitude(numeric) – geographical locations 

Longitude(numeric) - geographical locations 

room_type(categorical) – what type of room are you hiring, whether it is private or single-bed . 

price(numeric)- price of the airbnb 

minimum_nights(numeric) – minimum nights you can stay. 

,number_of_reviews(numeric) -  number of reviews the Airbnb has got. 

last_review(date) -  what date is the last review given. 

reviews_per_month(numeric) – total number of reviews each month 

calculated_host_listings_count(numeric) – count of total hostings till date hosted by the host 

availability_365(numeric) – availability of the Airbnb throughout the year. 

  
<li>State how you got your pipeline into your system.</li>
<b> Answer : </b> We had created the Mongo Db database called “AirbnbDataGuild8" which will be acting as our data storage. 

Once the above step was done, the data which we had cleaned previously performing certain data-preprocessing on the raw data was taken and it was written/ingested into the database which we had created in MongoDB. 

We had then build our pipeline keeping the target attribute(price) and the below attributes inside the pipeline: 

"neighbourhood_group”  , "neighbourhood"  , "room_type" , "minimum_nights" , "reviews_per_month" ,               "calculated_host_listings_count" , "availability_365"

Once, the above step was done, it was extracted into “df” dataset frame to be used further in the regression models used for machine learning. 

<li>Describe the Predicted Outcome – what you intended it to do.</li>
<b>Answer : </b> Below is what we intended to do and acheive :
As a host to figure out what price to charge for a listing on the site. 

Airbnb pricing is important to get right, particularly in big cities like New York where there is lots of competition and even small differences in prices can make a big difference. It is also a difficult thing to do correctly — price too high and no one will book. Price too low and you’ll be missing out on a lot of potential income. 

New hosts who are unsure of pricing for their listing . Prices vary depending on neighbourhood, city, availability arounf the year and many other factors.This would help the host to get the best price in the competitive market. 

This will help both the host and the user. The host that are unsure of the current market price for their listing in a given location. And the user in finding the best and yet reasonable place to stay for a particular location depending on their budget. 

<li>Analysis of the solution/General Analysis of your AI. This should be evaluation of the topics e.g. what topic modelling did you perform, topic identification,AI Experiment Result Observations. </li>
<b> Answer : </b> Regression was performed for our modelling experiments. The result of that AI experiment is: 

***********************************************
Advanced scoring metrics for the trained regression model on this particular dataset:

Here is the overall RMSE for these predictions:
178.59686987468635

Here is the average of the predictions:
143.40899151232523

Here is the average actual value on this validation set:
143.5290845190264

Here is the median prediction:
163.53365690966226

Here is the median actual value:
109.0

Here is the mean absolute error:
58.4769194394754

Here is the median absolute error (robust to outliers):
33.526358775433295

Here is the explained variance:
0.12546888285850077

Here is the R-squared value:
0.12546848743432915
Count of positive differences (prediction > actual):
4925
Count of negative differences:
2308
Average positive difference:
42.852276709470594
Average negative difference:
-91.81806564626618



***********************************************
As per our observation we can see that the model has overall RMSE is 178.59686987468635 which says that or model is predicting the responses well and that the criteria selected to run the experiment fits well. 

Average of prediction is large which is almost same as average actual value on this validation . when considering all the parameters for prediction our model fits best for our data and we are getting good result of prediction without much loss . 

The count of positive differences is greater than negative differences. 


<li>High Level Overview of your AI – enterprise risks, establish there is no risk.</li>
<b>Answer:  </b>
The AI experiment has been normalized to present any regression model to get bias. Biasing is a problem which exists with AI systems having raw data. 

The reinforcement to make the algorithm learn faster in the AI system to predict the price for the listed Airbnb rooms and also for the new listings. 

We have made sure that the training dataset is made to fit inorder to get accurate data.   

From enterprise risk point of view encryption should be applied and the access to the public ip should be change so that the data remains secure. 
</ul>
"""

##Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
# ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.PERFORM_AI_FORENSICS)

"""## <H1>Generate insight</H1>
Insights are delivered through microservices with published APIs. The code in this section prepares an execution environment for the microservice, builds a microservice using the machine-learning model, deploys the microservice into the execution environment, and publishes an API enpoint for the microservice. Design the microservice and deploy it. The work of creating the microservice and deploying it will be done automatically. The code will also automatically handle the source code reposity management.

This video provides an overview of the algorithm execution environment provided by Algorithmia. It describes the basic concept of the Algorithmia AI Layer and walks you through publishing a microservice. Watch this video if you are unfamiliar with publishing microservices using Algorithmia. This video should be removed or replaced if the microservices are run using something other than Algorithmia.
"""

YouTubeVideo('56yt2Bouq0o')

"""### <H2>Configure the microservice execution environment</H2>
The execution environment is where the micorservice runs. This code assumes that the microservice execution environment is Algorithmia. If the microservices will be deployed somewhere other than Algorithmia, the code in this section will need to be replaced. In order to provide the information required to design the microservice, you must:
<ul>
  <li>create an Algorithmia account</li>
  <li>create an <a href='https://algorithmia.com/user#credentials' target='new'>API key</a> with BOTH "Read & Write Data" and "Manage Algorithms" permissions enabled</li>
  <li>create an algorithm user name</li>
</ul>

### <H2> Design the microservice </H2>
This code defines the parameters needed to build and delpoy a microservice based on the trained <code>model</code>. Update <code>microservice_design</code> with parameters appropriate for your project. The parameters must contain valid keys, namespaces, and model paths from Algorithmia (see above). The <code>microservice_design</code> will need to be updated if the microservice will run in something other than Algorithmia.
"""

# TODO design a microservice
microservice_design = {
    "microservice_name": "Guild8Airbnb2",
    "microservice_description": "Airbnb Prediction",
    "execution_environment_username": "Nupurroy",
    "api_key": "simdNt7ATS4WxIvARlcMxiBL8/71",
    "api_namespace": "Nupurroy/Guild8Airbnb2",   
    "model_path":"data://.my/mycollection"
}

"""### <H2>Apply for the Create Utility AI Services Badge</H2>

This code applies for the Create Utility AI Services Open Badge. Run this code only if you are interested in earning the badge. This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that you have successfully publised the AI microservice.

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.</li>
### <H2>Todo: </H2> 
Before applying for the badge please answer the following questions.
<ul>
<li>How did you monitor the AI Utility and manage the data pipelines? Should they have implemented any monitoring? In scope, was there additional needs? </li><li>How did you manage the security of the data and models?</li><li>How did you expose models of the AI Utility as APIs?</li></ul>

Answers:
Question 1: How did you monitor the AI Utility and manage the data pipelines? Should they have implemented any monitoring? In scope, was there additional needs?

We have used the system which we had set for our pipelines to monitor the performance in the AI Utility.
The below steps were used to monitor the performance where the key performance indicators were used:

1. Individual jobs
2. Average runtime
3. Success of the jobs build in data pipeline.
4. Failures of the the jobs build in data pipeline.
5. No.of rows which we had updated as part of data_cleaning.
6. I/O rates.

Question 2:How did you manage the security of the data and models?

Security of data and models was handled through API key created using Algorithmia and required permissions were given to the data.

Question 3: How did you expose models of the AI Utility as APIs?

We have follwed the below steps:

1. Created an Algorithmia account.
2. Created and API with the required permission levels.
3. Provided read and write access to the API.
4. Created a new hosted data collection.
5. The microservice was setup based on the following:
    Name of the microservice
    Description of the microservice
    Alroithmia username
    API Key
    API Namespace
    Model path of created data collection
6. Once, the above steps were done, the microservice was published.
"""

##Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
#ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.BUILD_UTILITY_AI_SERVICES)

"""### <H2>Publish the microservice</H2>
<code>publish_microservice</code> function from <code>ai library</code> committs the changes made to the local, cloned GitHub repository and compiles the new microservice in Algorithmia and publish the microservice. It also generates the api endpoint for the newly published microservice. Run the code. Copy the URL and paste it into the <code>datastory</code>. After pasting the enpoint into the <code>datastory</code>, the <code>datastory</code> should succeed and you should be done.
"""

# publish the micro service and display the url of the api
api_url = ai.publish_microservice(microservice_design, trained_model, verbose = False)
print("api url: " + api_url)

"""## <H2>Apply for the Agile Transformation Badge</H2>
This code applies for the Agile Transformation Open Badge. Run this code only if you are interested in earning the badge. This code will submit a link to this notebook to reviewers as evidence for your badge. Badge reviewers will inspect this notebook to ensure that the <code>datastory()</code> runs properly and the test passes.

After inspection, you will receive notification either confirming that you have earned the badge or with suggested changes.
### <H2>Todo: </H2> 
Before applying for the badge please answer the following questions.
<ul><li>Explain your data, how it is transmitted and stored – how? </li></ul>

Answer:
1. We had Created the Data Story which describes our microservice.

2. Once the story was created we had to access the raw data which would be used as the input for our train model.

3. The dataset was then loaded and the cleaning of the raw data was performed as it had null values in the data_review.

4. Visualization of the data was performed to analyze the distribution.

5. The data_field types were defined for categorical, numerical, text-field and for the date_field.

6. Next we had build the Pipeline which refined our data for further modelling.

7. Once, this step was completed wehad loaded the data into mongodb and then passed the raw data to the pipeline for the prediction of the fileds defined above.

8. Here, the dataset was splitted into train and test sets to be given as input in the model for running the experiment.

9. We had then created the microservice and the data storage as:
    Created an Algorithmia account.
    Created and API with the required permission levels.
    Provided read and write access to the API.
    Created a new hosted data collection.
10. The microservice was setup based on the following: Name of the microservice 11. Description of the microservice Alroithmia username API Key API Namespace 12. Model path of created data collection
Once, the above steps were done, the microservice was published.

Finally, we have generated microservice(API endpoint) using Algorithmia.
"""

##Todo: When you are ready to apply for the badge, please uncomment the below code and run the code for badge submission.
#ai.apply_for_an_ai_badge(ai_guild_profile, ai.AI_Badge.RUN_AGILE_TRANSFORMATION)